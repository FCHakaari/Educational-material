Вопросы к модулю

Что такое классы и методы?
Ответ: 
	- Класс - ссылочный тип данных. Шаблон для создания объектов;
	- Методы - именнованный блок кода который выполняет определенные дейтствия. Позволяет использовать повторно блок кода, что делает код более управляемым и читаемым

Что такое конструктор класса?
Ответ:
	- Конструктор класса  - это специальный метод, который называется именнем класса. Он вызывается автоматически при создание нового объекта этого класса. Конструктор класса например позволяет инициализировать поля и свойства внутри блока кода данного класа

Что такое геттеры и сеттеры? Для чего используются геттеры и сеттеры?
Ответ: 
	- Это специальные методы, которые определяют, как можно получить и изменить значение свойств  
	- get - получение данных 
	Пример использования get
		1) Console.WriteLine(person.Name) // Tom 
		
	- set - устанавливается значения
	Пример использования set
		1) указатель на объект класса.указатель куда передаем = значение;
		2) person.Name = "Tom';
	
	Пример написания:
		1) public string Name { get; set; }
		2) piblic string Name 
		{
			get { return name; }			
			set { name = value; }
		}
		3) piblic string Age 
		{
			get { return age; }			
			set 
			{ 
				if (value < 1 || value > 120)
				{
					Console.WriteLine("");
				}
				else
				{
					age = value;
				} 
			}
			
			person.Age = 37;
			Console.WriteLine(person.Age);  // 37

			person.Age = -23;               // Возраст должен быть в диапазоне от 1 до 120
			Console.WriteLine(person.Age);  // 37 - возраст не изменился
		}
		
Что такое модификаторы доступа? Для чего они используются?
Ответ: 
	- Модификаторы доступа позволяют указать допустимую зону видимости для компонентов класса, если не указать модификаторы доступа, то по умолчанию будет private. 
	- Основные 6 модификаторов доступа: 
		- public - публичный, доступ в любом участке кода, а также в других сборках; 
		- private - приватный, доступный только в рамках своего класса или структуры;
		- protected - доступен в любом участке кода или его производных(классы-наследники); 
		- internal - доступен в любом участке кода, однако не доступен в других сборках;
		- protected internal - совмещает функционал protected и internal. Доступен из любово места в текущей сборке и из производных классов, которые могут располагаться в других сборках;
		- private protected - компонент класса доступен из любого места в своем классе или в производных классах, которые определены в той же сборке.
	- 2 дополнительных модификаторов доступа:
		- file - класс или структура с таким модификатором доступен только в этом файле;
		- sealed - кастрация класса. Класс с таким модификатором доступа может наследоваться от другого класса, но от него нельзя наследоваться.

Какие методы и поля называются статическими? Зачем нужны статические методы?
Ответ:
	- Статические методы и поля принадлежат не конкретному объекту класса, а самому классу, то есть мы можем обратиться к статическим методам и полям не создавая объект класса. 
	- Это может пригодиться:
		- если будет какой-либо метод, который выполняет одно и тоже действия во всех экземплярах класса,
		- если будет статическое поле, то чаще всего используется для реализации счетчиков, констант, глобальных переменных и т.п.

Что такое наследование? Зачем используется наследование? От скольких классов можно наследоваться в C#?
Ответ:
	- Наследование - позволяет одному классу получить свойства и методы другого класса, а также дочерный класс можно изменять, дополнять и т.п.
	Пример:
		1 вариант:
			public class Animal
			{
				public string Name { get; set; }
				
				public void Eat()
				{
					Console.WriteLine($"{Name} ест.");
				}
			}

			public class Dog : Animal 
			{

			}
			
	- Наследование используют из-за огромного кол-во плюсов:
		- Повторное использование кода, что позволяет уменьшить объем работы, а также сгрупировать код
		- Расширенние функционала, если мы добавим поля или методы в родительский класс, то дочерние классы также смогут использовать данные методы или поля
		- Гибкость, создаются иерархии классов, то есть родительский класс может быть заменен дочерним.
		
	- Наследоваться можно только от 1 класса, но если наследоваться от интерфейсов, то ограничений нет
	Пример
		1 вариант одиночное наследование интерфейса
			interface IRunAction
			{
			    void Run();
			}
			class BaseAction : IRunAction
			{
			    public void Run()
			    {
				Console.WriteLine("Run");
			    }
			}
		2 вариант множественное наследование интерфейса
			interface IAction
			{
			    void Move();
			}
			interface IRunAction : IAction
			{
			    void Run();
			}
			class BaseAction : IRunAction
			{
			    public void Move()
			    {
				Console.WriteLine("Move");
			    }
			    public void Run()
			    {
				Console.WriteLine("Run");
			    }
			}

Что такое полиморфизм? Привести устный пример наследования и полиморфизма.
Ответ:
	- Полиморфизм позволяет один и тот же запрос обработать по разному, в зависимости от типа объекта, то есть дочерные классы могут провести изменения, которые не касаются функционала
	Пример:
		public class Animal
		{
			public void Sound()
			{
				Console.WriteLine("Звук");
			}
		}
		
		public class Dog : Animal
		{
			public void Sound()
			{
				Console.WriteLine("Гав-Гав");
			}
		}
		
		Animal animal1 = new Dog();  // Полиморфизм
		animal1.Sound();  // Выводит: "Гав-гав!"

Что такое интерфейс? Можно ли добавить в интерфейс статичные методы?
Ответ:
	- Интерфейс представляет ссылочный тип, который определяет некоторый функционал без реализации, а уже дочерние классы занимаются реализацией функционала. Обычно перед названием ставят "I", это не обязательно, просто стиль программирования.
	- В интерфейс можно добавить статичные методы

Что такое абстрактный класс? Чем абстрактный класс отличается от интерфейса?
Ответ:
	- Абстрактный класс - это некий шаблон на основе которого будут создаваться дочерние классы, но его нельзя использовать напрямую для создания объектов.
	- Интерфейс - может определять реализации по умолчанию для методов или полей, а абстрактный класс предназначем, чтобы быть просто шаблоном для дочерних классов

Что такое SOLID? Привести примеры каждого принципа SOLID.
Ответ:
	-Существует 5 основных принципов SOLID
		- SRP - принцип единственной ответственности. Один класс - одна задача
		- OCP - принцип открытости/закрытости. Класс открыт для расширения, закрыт для изменения
		- LSP - принцип подстановки Лисков. Должна быть возможность заменить объект базового класса объектом его подкласса без изменения правильности работы программы. Пример: если родительский класс делает кофе, то дочерний класс должен уметь делать кофе или кофейные напитки.
		- ISP - принцип разделения интерфейсов. Лучше иметь несколько узконаправленных интерфейсов, чем один универсальный.
		- DIP - принцип инверсии зависимостей. Модули верхнего уровня не должны зависить от модулей нижнего уровня. Абстракции не должны зависить от деталей, детали должны зависить от абстракции

Что такое инкапсуляция?
Ответ:
	- Инкапсуляция предполагает объединение данных и методов, которые работают с этими данными, а также сокрытие внутренней реализации от внешнего мира 

Для чего нужен Enum?
Ответ: 
	- Enum - это набор логически связанных констант. Используется, к примеру, для того, чтобы сделать код более осмысленным, заменить 0, 1, 2... на логичные имена red, blue, green...

Как подключать модули в C#? Для чего нужен Nuget?
Ответ:
	- Обычно используется ключевое слово "using". 
	- Nuget - менеджер пакетов в основном используемый для упаковки и распространения ПО написаных на .NET 

Что такое обобщения типов (Generics)? Для чего их можно использовать?
Ответ:
	- generic - обобщенные типы, способ создания универсальных классов, интерфейсов, методов и делегатов, которые могут работать с различными типами данных

Что такое иммутабельные коллекции и зачем они нужны? В чем преимущество использования? Как их создавать?
Ответ:
	- Иммутабельные коллекции в C# — это коллекции, которые не могут быть изменены после их создания. Для этого используется пакет Nuget System.Collections.Immutable

Коллекции в C#: List<T>, LinkedList<T>

Коллекции в C#: Queue<T>, Stack<T>, Dictionary<T, V>

Коллекции в C#: HashSet<T>

Что такое строковая интерполяция и как ее можно применять? Как сложить несколько строк вместе?

Как в C# взять подстроку строки? Как обрезать лишние пробелы в начале и в конце строки? Как поменять регистр строки? Как разделить строку по символу? .Trim() .TrimStart() TrimEnd() ToUpper() ToLower() Split()

Как в C# работать со значением null? Для чего оно нужно?

Как обрабатывать исключения? Как обработать определенное исключение?

Что такое класс Exception? Как создать свое исключение? Как можно использовать throw?
